@page "/note/{Id}"
@page "/note/new"
@using NotepadApp.Client.Services
@using NotepadApp.Shared.Models
@inject DocumentService DocumentService
@inject NavigationManager NavigationManager

<PageTitle>@(string.IsNullOrEmpty(note.Title) ? "New Note" : note.Title) - Notepad</PageTitle>

<div class="note-editor-container">
    <div class="note-editor-header">
        <div class="title-container">
            <input type="text" 
                   class="form-control note-title-input" 
                   placeholder="Note title..." 
                   @bind="note.Title" 
                   @bind:event="oninput" />
        </div>
        <div class="note-actions">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <span class="oi oi-arrow-left"></span> Back
            </button>
            <button class="btn btn-primary" @onclick="SaveNote">
                <span class="oi oi-check"></span> Save
            </button>
        </div>
    </div>
    
    <TagEditor Tags="@note.Tags" OnTagsChanged="HandleTagsChanged" />
    
    <TextEditor Text="@note.Content" OnTextChanged="HandleContentChanged" />
    
    @if (isSaving)
    {
        <div class="saving-indicator">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Saving...
        </div>
    }
    else if (lastSaved.HasValue)
    {
        <div class="last-saved-indicator">
            Last saved: @FormatDate(lastSaved.Value)
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    
    private NoteDto note = new();
    private bool isSaving;
    private DateTime? lastSaved;
    private bool isNewNote;
    
    protected override async Task OnInitializedAsync()
    {
        isNewNote = Id == "new" || string.IsNullOrEmpty(Id);
        
        if (!isNewNote)
        {
            var existingNote = await DocumentService.GetNoteAsync(Id);
            if (existingNote != null)
            {
                note = existingNote;
                lastSaved = note.LastModified; // Change this line from UpdatedAt to LastModified
            }
            else
            {
                NavigationManager.NavigateTo("/notes");
            }
        }
    }
    
    private async Task SaveNote()
    {
        isSaving = true;
        
        try
        {
            var savedNote = await DocumentService.SaveNoteAsync(note);
            
            if (isNewNote)
            {
                isNewNote = false;
                NavigationManager.NavigateTo($"/note/{savedNote.Id}", replace: true);
            }
            
            lastSaved = DateTime.UtcNow;
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void HandleContentChanged(string newContent)
    {
        note.Content = newContent;
    }
    
    private void HandleTagsChanged(List<string> newTags)
    {
        note.Tags = newTags;
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/notes");
    }
    
    private string FormatDate(DateTime date)
    {
        var now = DateTime.UtcNow;
        var diff = now - date;
        
        if (diff.TotalMinutes < 1)
        {
            return "Just now";
        }
        if (diff.TotalHours < 1)
        {
            return $"{(int)diff.TotalMinutes} minutes ago";
        }
        if (diff.TotalDays < 1)
        {
            return $"{(int)diff.TotalHours} hours ago";
        }
        
        return date.ToString("MMM dd, yyyy h:mm tt");
    }
}