using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace NotepadApp.Shared.Models
{
    public class NoteDto
    {
        // Changed from int to string to match DocumentService implementation
        public string Id { get; set; } = string.Empty;

        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; } = string.Empty;

        public string Content { get; set; } = string.Empty;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public List<string> Tags { get; set; } = new List<string>();

        // Additional properties that might be useful
        public bool IsPinned { get; set; } = false;

        public string ColorHex { get; set; } = "#ffffff"; // Default white background

        [JsonIgnore]
        public bool IsModified => UpdatedAt > CreatedAt;

        [JsonIgnore]
        public int WordCount => string.IsNullOrWhiteSpace(Content) ? 0 : Content.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries).Length;

        // Helper method to create a new empty note
        public static NoteDto CreateNew()
        {
            return new NoteDto
            {
                Id = string.Empty, // Will be set by the service
                Title = "New Note",
                Content = string.Empty,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Tags = new List<string>()
            };
        }

        // Helper method to create a deep copy of a note
        public NoteDto Clone()
        {
            return new NoteDto
            {
                Id = this.Id,
                Title = this.Title,
                Content = this.Content,
                CreatedAt = this.CreatedAt,
                UpdatedAt = this.UpdatedAt,
                Tags = new List<string>(this.Tags),
                IsPinned = this.IsPinned,
                ColorHex = this.ColorHex
            };
        }
    }
}